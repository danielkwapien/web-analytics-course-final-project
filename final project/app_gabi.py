# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q43dI6L7lxfcAXckfl71qSHjVaIS0btr
"""

# !pip install streamlit pyvis networkx pandas

# from google.colab import drive
# drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/MyDrive/WEB_ANALYTICS/FINAL PROJECT/data/'

import streamlit as st
import pandas as pd
import networkx as nx
from pyvis.network import Network

# Load your dataset (replace 'cities_genres.csv' with your actual file)
df_cities_genres = pd.read_csv('final project/data/cities_genres.csv')

# Streamlit UI
st.title("Interactive Bipartite Graph: Cities, Event Types, and Event Names")
st.sidebar.header("Filters")

# Filters
selected_city = st.sidebar.multiselect(
    "Select Cities",
    options=df_cities_genres['city'].unique(),
    default=df_cities_genres['city'].unique()
)

selected_genre = st.sidebar.multiselect(
    "Select Event Types (Genres)",
    options=df_cities_genres['genre'].unique(),
    default=df_cities_genres['genre'].unique()
)

# Filter the DataFrame
filtered_df = df_cities_genres[
    (df_cities_genres['city'].isin(selected_city)) &
    (df_cities_genres['genre'].isin(selected_genre))
]

st.write("Filtered Data:")
st.dataframe(filtered_df)

# Function to create a bipartite graph using the filtered data
def create_bipartite_graph(df):
    B = nx.Graph()

    # Add nodes and edges
    for _, row in df.iterrows():
        city = row['city']
        genre = row['genre']
        event_name = row['event_name']

        # Add nodes
        B.add_node(city, type='city', label=city)
        B.add_node(genre, type='genre', label=genre)
        B.add_node(event_name, type='event', label=event_name)

        # Add edges
        B.add_edge(city, genre)
        B.add_edge(genre, event_name)

    return B

# Generate the graph
graph = create_bipartite_graph(filtered_df)

# Function to visualize the graph with PyVis
def visualize_graph(graph):
    net = Network(height="700px", width="100%", notebook=False)

    for node, data in graph.nodes(data=True):
        node_type = data['type']
        if node_type == 'city':
            net.add_node(node, label=node, color='skyblue')
        elif node_type == 'genre':
            net.add_node(node, label=node, color='lightgreen')
        elif node_type == 'event':
            net.add_node(node, label=node, color='salmon')

    for source, target in graph.edges():
        net.add_edge(source, target)

    # Generate the graph as an HTML file in memory
    net_html = net.generate_html()
    return net_html

# Render the graph and get the HTML
net_html = visualize_graph(graph)

# Display the HTML graph in Streamlit
# st.components.v1.html(net_html, height=750)

# Commented out IPython magic to ensure Python compatibility.
# %cd '/content/drive/MyDrive/WEB_ANALYTICS/FINAL PROJECT/'



